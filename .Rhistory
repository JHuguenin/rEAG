fmr <- which(Sname == expdes$File) # index dans le plan d'experience
Cvoc <- expdes$VOCconcentration[fmr] # Concentrations associees
Svoc <- expdes$VOCseq[fmr] # sequences VOC associees
# Figure des EAG brutes ####
dt_eag <- eag  # data
dt_eag$time <- (1:nrow(eag))/100
dt_eag <- dt_eag[,-grep("FID",colnames(dt_eag))]
setDT(dt_eag) # transformation en data.table (???)
Teag <- melt(dt_eag, id.vars = "time") # mise en forme pour plotly
Teag$num <- Teag$variable # ajout des concentrations
levels(Teag$num) <- str_replace(levels(Teag$num),"DIG","EAD")
fig <- plot_ly(Teag, type = "scatter", mode = "lines", x = ~time, y = ~value,
color = ~num, name = ~variable)
fig <- plotly::layout(fig, title = Sname,
xaxis = list(title = 'Time (sec)'),
yaxis = list(title = 'EAG (mV)'))
htmlwidgets::saveWidget(fig, paste0(wd,"/figures/options_graph_dy.html"), selfcontained = TRUE)
file.rename(from = paste0(wd,"/figures/options_graph_dy.html"),
to = paste0(wd,"/figures/",Sname,"_raw.html"))
# Traitement de chaque signal ####
resM <- NULL # matrice des resultats
for(k in 1:neag){ # k=1
# index effectif du fichier signal
i <- seq(length.out = neag,by = 3)[k]
# La sequence VOC
VOCseq <- str_squish(Svoc[k]) %>% str_split(" ") %>% unlist()
# recherche des pulses
pulse <- eag[,i+2] - c(eag[-1,i+2],-0.5)
dP <- data.frame(str = which(pulse == -1),
end = which(pulse == -1)+tmP) # position des pulses start et end
if(length(VOCseq) != nrow(dP) ) stop("The 'VOC sequence' of experimental design does not correspond to the number of pulses")
# name pulse
rownames(dP) <- paste0(VOCseq, ave(VOCseq, VOCseq, FUN = seq), "_c",Cvoc[k])
# calcules preliminaires
dP$X1 <- dP$str - 2*tmP # un blanc anterieur au pulse d'une duree deux fois plus longue que le pulse
dP$X2 <- dP$end + tmD # idem pour le blanc ulterieur
dP$Idp <- rep(NA,nrow(dP)) # NA pour l'intensite de la depolarisation
dP$Tdp <- rep(NA,nrow(dP)) # NA pour la duree de depolaristation
matP <- matrix(NA,nrow(dP),length(dP$X1[1]:dP$X2[1])) # une matrix pour l'EAG brut du pulse elargie
matS <- matP # la meme pour le signal EAG lissee
# chaque peuf
for(j in 1:nrow(dP)) { #j=1 # pour chaque pulse de la sequence
# preparation des matrix signals
IndP <- dP$X1[j]:dP$X2[j] # les index du pulse elargie
matS[j,] <- savgol(eag[IndP,i],ws) # lissage
fmr <- matS[j,2*tmP+1] # le shift a T0
matS[j,] <- matS[j,] - fmr # suppression du shift
matP[j,] <- eag[IndP,i] - fmr # idem pour l'EAG non lissee
# caracterisation de l'impuslion
Ips <- (2*tmP):(2*tmP + tmD) # de T0 à T0+TmD la duree de depolarisation du VOC
dP$Idp[j] <- min(matS[j,Ips]) # l'intensite max de la depol
dP$Tdp[j] <- (which.min(matS[j,Ips])-2)/100 # sa duree
}
# Nettoyage des donnees
matS[,1:((ws-1)/2)] <- NA # suppression des vagues induites par le lissage
matS[,(ncol(matS)-((ws-1)/2)):ncol(matS)] <- NA # idem pour la fin du signal
Tp <- dP$X1[j]:dP$X2[j] - dP$str[j]# le temps recentre
# # Graphe control
# matplot(Tp/100,t(matS), type = "l", lwd = 2, lty = 1, col = rainbow(nrow(dP)),
#         xlab = "Time (s)", ylab = "EAG (mV)", main = paste(Sname,"\nC =",Cvoc[k]))
# matplot(Tp/100,t(matP), type = "l", lwd = 1, lty = 1, col = rainbow(nrow(dP)), add = TRUE)
# abline(v = c(0,tmP/100), col = "orange", lwd = 2, lty = 2)
# points(dP$Tdp, dP$Idp, col = "black", pch = 16)
# legend("bottomleft", legend = rownames(dP), lty = 1, lwd = 2,col = rainbow(nrow(dP)))
# Union des matrix
dP$con <- as.numeric(Cvoc[k])
dP$seq <- VOCseq
ict <- which(dP$seq == control)
dP$Idp_norm <- dP$Idp - mean(dP$Idp[ict])
# mise en forme
colnames(matS) <- paste0("T_",Tp) # le temps
fmr <- !is.na(matS[1,]) # pour le calcul du temps lors de la partie eag ci-dessus ... ouais c'est pas ouf
matS <- matS[,!is.na(matS[1,])] # suppression des vagues du au lissage
resM <- rbind(resM,cbind(dP[,5:9], matS)) # maj de la matrice
}
# Mise en forme finale ####
depol <- resM[,1:5] # on garde l'intensité et le temps de depol, ainsi que la concentration et le VOC
i_ctrl <- which(depol$seq == control) # l'index des controls
depol$con[i_ctrl] <- 0 # mise a zero des temoins
depol$con <- as.character(depol$con) %>% as.factor() # les numeriques posent probleme pour le graphe
depol$seq <- as.factor(depol$seq) # facteur
depol$variable <- rownames(depol) # pour le graphe
depol$Idp_adj <- abs(depol$Idp)
depol$Idp_adj[i_ctrl] <- 0
depol$Idp_norm_adj <- abs(depol$Idp_norm)
depol$Idp_norm_adj[i_ctrl] <- 0
eag <- data.frame(time = Tp[fmr]/100, t(resM[,-(1:5)])) # data
setDT(eag) # transformation en data.table
Teag <- melt(eag, id.vars = "time") # mise en forme pour plotly
Teag$seq <- Teag$variable # ajout de la sequence des VOC
levels(Teag$seq) <- depol$seq
Teag$con <- Teag$variable # ajout des concentrations
levels(Teag$con) <- depol$con
# Graphes ####
### by Concentration ...
# plotly for interactive plot
fig <- plot_ly(Teag, type = "scatter", mode = "lines", x = ~time, y = ~value,
color = ~con, name = ~variable)
fig <- plotly::layout(fig, title = Sname,
shapes = list(list(type = "line", y0 = 0, y1 = 1, yref = "paper",
x0 = 0, x1 = 0, line = list(color = "orange", dash="dot")),
list(type = "line", y0 = 0, y1 = 1, yref = "paper",
x0 = tmP/100, x1 = tmP/100, line = list(color = "orange", dash="dot"))),
xaxis = list(title = 'Time (sec)'),
yaxis = list(title = 'EAG (mV)'),
legend = list(title=list(text='<b> VOC_concentration </b>'), x = 0.02, y = 0.9))
fig <- add_markers(fig, x = ~Tdp, y = ~Idp, data = depol, showlegend= FALSE)
htmlwidgets::saveWidget(fig, paste0(wd,"/figures/options_graph_dy.html"), selfcontained = TRUE)
file.rename(from = paste0(wd,"/figures/options_graph_dy.html"),
to = paste0(wd,"/figures/",Sname,"_by_concentration.html"))
# matplot for fixed plot
depol$col_C <- depol$con
levels(depol$col_C) <- RColorBrewer::brewer.pal(length(unique(depol$con)),"Dark2")
tiff(filename = paste0(wd,"/figures/",Sname,"_by_concentration.tiff"), width = 1000, height = 580)
par(mar = c(5,5,3,0.1), cex.main=2, cex.lab = 2, cex.axis = 2, mgp = c(3.5,1.5,0))
matplot(eag$time,eag[,-1], type = "l", lty = 1, col = as.character(depol$col_C), lwd = 2,
main = Sname, xlab = "Time (sec)", ylab = "EAG (mV)")
abline(h = 0)
abline(v = c(0,tmP/100), lty = 2, col = "orange")
points(depol$Tdp, depol$Idp, pch = 16, col = as.character(depol$col_C), cex = 1.5)
legend("bottomleft", legend = rownames(depol),col = as.character(depol$col_C), lty = 1)
dev.off()
### by VOC
fig <- plot_ly(Teag, type = "scatter", mode = "lines", x = ~time, y = ~value,
color = ~seq, name = ~variable)
fig <- plotly::layout(fig, title = Sname,
shapes = list(list(type = "line", y0 = 0, y1 = 1, yref = "paper",
x0 = 0, x1 = 0, line = list(color = "orange", dash="dot")),
list(type = "line", y0 = 0, y1 = 1, yref = "paper",
x0 = tmP/100, x1 = tmP/100, line = list(color = "orange", dash="dot"))),
xaxis = list(title = 'Time (sec)'),
yaxis = list(title = 'EAG (mV)'),
legend = list(title=list(text='<b> VOC_concentration </b>'),
x = 0.02, y = 0.9))
fig <- add_markers(fig, x = ~Tdp, y = ~Idp, data = depol, showlegend= FALSE)
htmlwidgets::saveWidget(fig, paste0(wd,"/figures/options_graph_dy.html"), selfcontained = TRUE)
file.rename(from = paste0(wd,"/figures/options_graph_dy.html"),
to = paste0(wd,"/figures/",Sname,"_by_VOC.html"))
# matplot for fixed plot
depol$col_S <- depol$seq
levels(depol$col_S) <- RColorBrewer::brewer.pal(length(unique(depol$seq)),"Accent")
tiff(filename = paste0(wd,"/figures/",Sname,"_by_sequence.tiff"), width = 1000, height = 580)
par(mar = c(5,5,3,0.1), cex.main=2, cex.lab = 2, cex.axis = 2, mgp = c(3.5,1.5,0))
matplot(eag$time,eag[,-1], type = "l", lty = 1, col = as.character(depol$col_S), lwd = 2,
main = Sname, xlab = "Time (sec)", ylab = "EAG (mV)")
abline(h = 0)
abline(v = c(0,tmP/100), lty = 2, col = "orange")
points(depol$Tdp, depol$Idp, pch = 16, col = as.character(depol$col_S), cex = 1.5)
legend("bottomleft", legend = rownames(depol),col = as.character(depol$col_S), lty = 1)
dev.off()
# Export ####
depol$col_C <- NULL
depol$col_S <- NULL
return(new(Class = "eag", depol = depol, eag = eag, tmP = tmP, wd = wd, names = Sname))
}
eag.import <- function(Sname, expdes = ExDs, control = "T", tmP = 50,tmD = NULL, wd = NULL, ws =25){
# check ####
if (is.null(wd) == TRUE) wd <- getwd()
if (is.null(tmD) == TRUE) tmD <- 2*tmP
if (!is.character(wd)) stop("'wd' must be character")
if (("figures" %in% dir(wd))==FALSE) dir.create(paste0(wd,"/figures"))
if (!is.character(Sname)) stop("'Sname' must be character")
if (!is.numeric(ws)) stop("'ws' must be numeric")
if (!is.numeric(tmP)) stop("'tmP' must be numeric")
if (!is.numeric(tmD)) stop("'tmD' must be numeric")
if (!is.character(control)) stop("'control' must be a character")
if (length(ws) != 1) stop("Length of 'ws' must be 1.")
if (length(tmP) != 1) stop("Length of 'tmP' must be 1.")
if (length(tmD) != 1) stop("Length of 'tmD' must be 1.")
if (length(control) != 1) stop("Length of 'control' must be 1.")
if (!is.data.frame(expdes)) stop("Experimental Design must be a data frame")
# Importation du fichier EAG ####
eag <- read.csv(paste0(wd,"/",Sname,".csv")) # import du fichier EAG
fmr <- grep("AVE",colnames(eag)) # detection des colonnes AVE
if(length(fmr)>0)  eag <- eag[, -fmr] # suppresion des colonnes AVE
neag <- ncol(eag)/3  # nombre de signaux EAG
fmr <- str_split(Sname,"/",simplify = TRUE)
Sname <- as.character(fmr[length(fmr)])
fmr <- which(Sname == expdes$File) # index dans le plan d'experience
Cvoc <- expdes$VOCconcentration[fmr] # Concentrations associees
Svoc <- expdes$VOCseq[fmr] # sequences VOC associees
# Figure des EAG brutes ####
dt_eag <- eag  # data
dt_eag$time <- (1:nrow(eag))/100
dt_eag <- dt_eag[,-grep("FID",colnames(dt_eag))]
setDT(dt_eag) # transformation en data.table (???)
Teag <- melt(dt_eag, id.vars = "time") # mise en forme pour plotly
Teag$num <- Teag$variable # ajout des concentrations
levels(Teag$num) <- str_replace(levels(Teag$num),"DIG","EAD")
fig <- plot_ly(Teag, type = "scatter", mode = "lines", x = ~time, y = ~value,
color = ~num, name = ~variable)
fig <- plotly::layout(fig, title = Sname,
xaxis = list(title = 'Time (sec)'),
yaxis = list(title = 'EAG (mV)'))
htmlwidgets::saveWidget(fig, paste0(wd,"/figures/options_graph_dy.html"), selfcontained = TRUE)
file.rename(from = paste0(wd,"/figures/options_graph_dy.html"),
to = paste0(wd,"/figures/",Sname,"_raw.html"))
# Traitement de chaque signal ####
resM <- NULL # matrice des resultats
for(k in 1:neag){ # k=1
# index effectif du fichier signal
i <- seq(length.out = neag,by = 3)[k]
# La sequence VOC
VOCseq <- str_squish(Svoc[k]) %>% str_split(" ") %>% unlist()
# recherche des pulses
pulse <- eag[,i+2] - c(eag[-1,i+2],-0.5)
dP <- data.frame(str = which(pulse == -1),
end = which(pulse == -1)+tmP) # position des pulses start et end
if(length(VOCseq) != nrow(dP) ) stop("The 'VOC sequence' of experimental design does not correspond to the number of pulses")
# name pulse
rownames(dP) <- paste0(VOCseq, ave(VOCseq, VOCseq, FUN = seq), "_c",Cvoc[k])
# calcules preliminaires
dP$X1 <- dP$str - 2*tmP # un blanc anterieur au pulse d'une duree deux fois plus longue que le pulse
dP$X2 <- dP$end + tmD # idem pour le blanc ulterieur
dP$Idp <- rep(NA,nrow(dP)) # NA pour l'intensite de la depolarisation
dP$Tdp <- rep(NA,nrow(dP)) # NA pour la duree de depolaristation
matP <- matrix(NA,nrow(dP),length(dP$X1[1]:dP$X2[1])) # une matrix pour l'EAG brut du pulse elargie
matS <- matP # la meme pour le signal EAG lissee
# chaque peuf
for(j in 1:nrow(dP)) { #j=1 # pour chaque pulse de la sequence
# preparation des matrix signals
IndP <- dP$X1[j]:dP$X2[j] # les index du pulse elargie
matS[j,] <- savgol(eag[IndP,i],ws) # lissage
fmr <- matS[j,2*tmP+1] # le shift a T0
matS[j,] <- matS[j,] - fmr # suppression du shift
matP[j,] <- eag[IndP,i] - fmr # idem pour l'EAG non lissee
# caracterisation de l'impuslion
Ips <- (2*tmP):(2*tmP + tmD) # de T0 à T0+TmD la duree de depolarisation du VOC
dP$Idp[j] <- min(matS[j,Ips]) # l'intensite max de la depol
dP$Tdp[j] <- (which.min(matS[j,Ips])-2)/100 # sa duree
}
# Nettoyage des donnees
matS[,1:((ws-1)/2)] <- NA # suppression des vagues induites par le lissage
matS[,(ncol(matS)-((ws-1)/2)):ncol(matS)] <- NA # idem pour la fin du signal
Tp <- dP$X1[j]:dP$X2[j] - dP$str[j]# le temps recentre
# # Graphe control
# matplot(Tp/100,t(matS), type = "l", lwd = 2, lty = 1, col = rainbow(nrow(dP)),
#         xlab = "Time (s)", ylab = "EAG (mV)", main = paste(Sname,"\nC =",Cvoc[k]))
# matplot(Tp/100,t(matP), type = "l", lwd = 1, lty = 1, col = rainbow(nrow(dP)), add = TRUE)
# abline(v = c(0,tmP/100), col = "orange", lwd = 2, lty = 2)
# points(dP$Tdp, dP$Idp, col = "black", pch = 16)
# legend("bottomleft", legend = rownames(dP), lty = 1, lwd = 2,col = rainbow(nrow(dP)))
# Union des matrix
dP$con <- as.numeric(Cvoc[k])
dP$seq <- VOCseq
ict <- which(dP$seq == control)
dP$Idp_norm <- dP$Idp - mean(dP$Idp[ict])
# mise en forme
colnames(matS) <- paste0("T_",Tp) # le temps
fmr <- !is.na(matS[1,]) # pour le calcul du temps lors de la partie eag ci-dessus ... ouais c'est pas ouf
matS <- matS[,!is.na(matS[1,])] # suppression des vagues du au lissage
resM <- rbind(resM,cbind(dP[,5:9], matS)) # maj de la matrice
}
# Mise en forme finale ####
depol <- resM[,1:5] # on garde l'intensité et le temps de depol, ainsi que la concentration et le VOC
i_ctrl <- which(depol$seq == control) # l'index des controls
depol$con[i_ctrl] <- 0 # mise a zero des temoins
depol$con <- as.character(depol$con) %>% as.factor() # les numeriques posent probleme pour le graphe
depol$seq <- as.factor(depol$seq) # facteur
depol$variable <- rownames(depol) # pour le graphe
depol$Idp_adj <- abs(depol$Idp)
depol$Idp_adj[i_ctrl] <- 0
depol$Idp_norm_adj <- abs(depol$Idp_norm)
depol$Idp_norm_adj[i_ctrl] <- 0
eag <- data.frame(time = Tp[fmr]/100, t(resM[,-(1:5)])) # data
setDT(eag) # transformation en data.table
Teag <- melt(eag, id.vars = "time") # mise en forme pour plotly
Teag$seq <- Teag$variable # ajout de la sequence des VOC
levels(Teag$seq) <- depol$seq
Teag$con <- Teag$variable # ajout des concentrations
levels(Teag$con) <- depol$con
# Graphes ####
### by Concentration ...
# plotly for interactive plot
fig <- plot_ly(Teag, type = "scatter", mode = "lines", x = ~time, y = ~value,
color = ~con, name = ~variable)
fig <- plotly::layout(fig, title = Sname,
shapes = list(list(type = "line", y0 = 0, y1 = 1, yref = "paper",
x0 = 0, x1 = 0, line = list(color = "orange", dash="dot")),
list(type = "line", y0 = 0, y1 = 1, yref = "paper",
x0 = tmP/100, x1 = tmP/100, line = list(color = "orange", dash="dot"))),
xaxis = list(title = 'Time (sec)'),
yaxis = list(title = 'EAG (mV)'),
legend = list(title=list(text='<b> VOC_concentration </b>'), x = 0.02, y = 0.9))
fig <- add_markers(fig, x = ~Tdp, y = ~Idp, data = depol, showlegend= FALSE)
htmlwidgets::saveWidget(fig, paste0(wd,"/figures/options_graph_dy.html"), selfcontained = TRUE)
file.rename(from = paste0(wd,"/figures/options_graph_dy.html"),
to = paste0(wd,"/figures/",Sname,"_by_concentration.html"))
# matplot for fixed plot
depol$col_C <- depol$con
levels(depol$col_C) <- RColorBrewer::brewer.pal(length(unique(depol$con)),"Dark2")
tiff(filename = paste0(wd,"/figures/",Sname,"_by_concentration.tiff"), width = 1000, height = 580)
par(mar = c(5,5,3,0.1), cex.main=2, cex.lab = 2, cex.axis = 2, mgp = c(3.5,1.5,0))
matplot(eag$time,eag[,-1], type = "l", lty = 1, col = as.character(depol$col_C), lwd = 2,
main = Sname, xlab = "Time (sec)", ylab = "EAG (mV)")
abline(h = 0)
abline(v = c(0,tmP/100), lty = 2, col = "orange")
points(depol$Tdp, depol$Idp, pch = 16, col = as.character(depol$col_C), cex = 1.5)
legend("bottomleft", legend = rownames(depol),col = as.character(depol$col_C), lty = 1)
dev.off()
### by VOC
fig <- plot_ly(Teag, type = "scatter", mode = "lines", x = ~time, y = ~value,
color = ~seq, name = ~variable)
fig <- plotly::layout(fig, title = Sname,
shapes = list(list(type = "line", y0 = 0, y1 = 1, yref = "paper",
x0 = 0, x1 = 0, line = list(color = "orange", dash="dot")),
list(type = "line", y0 = 0, y1 = 1, yref = "paper",
x0 = tmP/100, x1 = tmP/100, line = list(color = "orange", dash="dot"))),
xaxis = list(title = 'Time (sec)'),
yaxis = list(title = 'EAG (mV)'),
legend = list(title=list(text='<b> VOC_concentration </b>'),
x = 0.02, y = 0.9))
fig <- add_markers(fig, x = ~Tdp, y = ~Idp, data = depol, showlegend= FALSE)
htmlwidgets::saveWidget(fig, paste0(wd,"/figures/options_graph_dy.html"), selfcontained = TRUE)
file.rename(from = paste0(wd,"/figures/options_graph_dy.html"),
to = paste0(wd,"/figures/",Sname,"_by_VOC.html"))
# matplot for fixed plot
depol$col_S <- depol$seq
levels(depol$col_S) <- RColorBrewer::brewer.pal(length(unique(depol$seq)),"Accent")
tiff(filename = paste0(wd,"/figures/",Sname,"_by_sequence.tiff"), width = 1000, height = 580)
par(mar = c(5,5,3,0.1), cex.main=2, cex.lab = 2, cex.axis = 2, mgp = c(3.5,1.5,0))
matplot(eag$time,eag[,-1], type = "l", lty = 1, col = as.character(depol$col_S), lwd = 2,
main = Sname, xlab = "Time (sec)", ylab = "EAG (mV)")
abline(h = 0)
abline(v = c(0,tmP/100), lty = 2, col = "orange")
points(depol$Tdp, depol$Idp, pch = 16, col = as.character(depol$col_S), cex = 1.5)
legend("bottomleft", legend = rownames(depol),col = as.character(depol$col_S), lty = 1)
dev.off()
# Export ####
depol$col_C <- NULL
depol$col_S <- NULL
return(new(Class = "eag", depol = depol, eag = eag, tmP = tmP, wd = wd, names = Sname))
}
CE120 <- eag.import(Sname = paste0("data_EAG/",filenames[1]), expdes = ExDs, wd = wod, tmD = 200)
CE120@depol
names(CE120)
CE120@depol
CE120@eag
CE120@depol
library(rEAG)
nS = 10
rep(1,nS)
library(rEAG)
library(rEAG)
for(j in 1:4) i += j
library(rEAG)
library(plotly)
library(stringr)
library(pracma)
library(RColorBrewer)
library(data.table)
library(rEAG)
library(rEAG)
library(rEAG)
create.experiment(VOC = c("L","B","N"), control = "C", nS = 5, nC = c(0.1,1,10,100))
create.experiment(VOC = c("L","B","N"), control = "C", nS = 5, nC = c(0.1,1,10,100))
nC=9
sample(nC,1:17)
sample(nC,17)
1:17
sample(1:17,nC)
c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00", "#ffff33",
"#a65628", "#f781bf", "#999999", "#66c2a5", "#fc8d62", "#8da0cb",
"#e78ac3", "#a6d854", "#ffd92f", "#e5c494", "#b3b3b3")[sample(1:17,nC)]
c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00", "#ffff33",
"#a65628", "#f781bf", "#999999", "#66c2a5", "#fc8d62", "#8da0cb",
"#e78ac3", "#a6d854", "#ffd92f", "#e5c494", "#b3b3b3")[sample(1:17,nC)]
c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00", "#ffff33",
"#a65628", "#f781bf", "#999999", "#66c2a5", "#fc8d62", "#8da0cb",
"#e78ac3", "#a6d854", "#ffd92f", "#e5c494", "#b3b3b3")[sample(1:17,nC)]
c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00", "#ffff33",
"#a65628", "#f781bf", "#999999", "#66c2a5", "#fc8d62", "#8da0cb",
"#e78ac3", "#a6d854", "#ffd92f", "#e5c494", "#b3b3b3")[sample(1:17,nC)]
c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00", "#ffff33",
"#a65628", "#f781bf", "#999999", "#66c2a5", "#fc8d62", "#8da0cb",
"#e78ac3", "#a6d854", "#ffd92f", "#e5c494", "#b3b3b3")[sample(1:17,nC)]
c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00", "#ffff33",
"#a65628", "#f781bf", "#999999", "#66c2a5", "#fc8d62", "#8da0cb",
"#e78ac3", "#a6d854", "#ffd92f", "#e5c494", "#b3b3b3")[sample(1:17,nC)]
c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00", "#ffff33",
"#a65628", "#f781bf", "#999999", "#66c2a5", "#fc8d62", "#8da0cb",
"#e78ac3", "#a6d854", "#ffd92f", "#e5c494", "#b3b3b3")[sample(1:17,nC)]
c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00", "#ffff33",
"#a65628", "#f781bf", "#999999", "#66c2a5", "#fc8d62", "#8da0cb",
"#e78ac3", "#a6d854", "#ffd92f", "#e5c494", "#b3b3b3")[sample(1:17,nC)]
c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00", "#ffff33",
"#a65628", "#f781bf", "#999999", "#66c2a5", "#fc8d62", "#8da0cb",
"#e78ac3", "#a6d854", "#ffd92f", "#e5c494", "#b3b3b3")[sample(1:17,nC)]
c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00", "#ffff33",
"#a65628", "#f781bf", "#999999", "#66c2a5", "#fc8d62", "#8da0cb",
"#e78ac3", "#a6d854", "#ffd92f", "#e5c494", "#b3b3b3")[sample(1:17,nC)]
c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00", "#ffff33",
"#a65628", "#f781bf", "#999999", "#66c2a5", "#fc8d62", "#8da0cb",
"#e78ac3", "#a6d854", "#ffd92f", "#e5c494", "#b3b3b3")[sample(1:17,nC)]
c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00", "#ffff33",
"#a65628", "#f781bf", "#999999", "#66c2a5", "#fc8d62", "#8da0cb",
"#e78ac3", "#a6d854", "#ffd92f", "#e5c494", "#b3b3b3")[sample(1:17,nC)]
c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00", "#ffff33",
"#a65628", "#f781bf", "#999999", "#66c2a5", "#fc8d62", "#8da0cb",
"#e78ac3", "#a6d854", "#ffd92f", "#e5c494", "#b3b3b3")[sample(1:17,nC)]
}
ncolor <- function(nC){
c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00", "#ffff33",
"#a65628", "#f781bf", "#999999", "#66c2a5", "#fc8d62", "#8da0cb",
"#e78ac3", "#a6d854", "#ffd92f", "#e5c494", "#b3b3b3")[sample(1:17,nC)]
}
ncolor(15)
ncolor(15)
ncolor(15)
ncolor(15)
ncolor(15)
ncolor(15)
ncolor(15)
ncolor(15)
ncolor(15)
ncolor(15)
ncolor(15)
ncolor(15)
brewer.pal.info
library(plotly)
library(stringr)
balblalbal
# library(plotly)
# library(stringr)
# library(pracma)
# library(RColorBrewer)
# library(data.table)
library(plotly)
library(stringr)
library(pracma)
library(RColorBrewer)
library(data.table)
library(plotly)
library(stringr)
library(pracma)
library(RColorBrewer)
library(data.table)
library(plotly)
library(stringr)
library(pracma)
library(RColorBrewer)
library(data.table)
library(plotly)
library(stringr)
library(pracma)
library(RColorBrewer)
library(data.table)
RColorBrewer::brewer.pal(length(unique(depol$con)),"Dark2")
brewer.pal.info
RColorBrewer::brewer.pal(length(unique(depol$con)),"Accent")
RColorBrewer::brewer.pal(8,"Accent")
RColorBrewer::brewer.pal(8,"Dark2")
RColorBrewer::brewer.pal(8,"Set1")
c(RColorBrewer::brewer.pal(8,"Accent"), RColorBrewer::brewer.pal(8,"Dark2"), RColorBrewer::brewer.pal(8,"Set1"), RColorBrewer::brewer.pal(8,"Set2"))
#'
#' a simple function for print results of EAG
#'
#' @param nC a number
#' @return color
#' @export
#'
#' @examples
#' # Meagdepol$con_seq <- paste0(Meag@depol$seq,"_",Meag@depol$con)
#' # eag.print(Meag, "con_seq")
ncolor <- function(nC){
#'
#' a simple function for print results of EAG
#'
#' @param nC a number
#' @return color
#' @export
#'
#' @examples
#' # Meagdepol$con_seq <- paste0(Meag@depol$seq,"_",Meag@depol$con)
#' # eag.print(Meag, "con_seq")
ncolor <- function(nC){
ncolor <- function(nC){
c(brewer.pal(8,"Accent"), brewer.pal(8,"Dark2"),
brewer.pal(8,"Set1"), brewer.pal(8,"Set2"))[sample(8*4,nC)]
}
ncolor(15)
ncolor <- function(nC){
c(brewer.pal(8,"Accent"), brewer.pal(8,"Dark2"),
brewer.pal(8,"Set1"), brewer.pal(8,"Set2"))[sample(8*4,nC)]
}
ncolor <- function(nC){
c(brewer.pal(8,"Accent"), brewer.pal(8,"Dark2"),
brewer.pal(8,"Set1"), brewer.pal(8,"Set2"))[sample(8*4,nC)]
}
ncolor <- function(nC){
c(brewer.pal(8,"Accent"), brewer.pal(8,"Dark2"),
brewer.pal(8,"Set1"), brewer.pal(8,"Set2"))[sample(8*4,nC)]
}
ncolor <- function(nC){
c(brewer.pal(8,"Accent"), brewer.pal(8,"Dark2"),
brewer.pal(8,"Set1"), brewer.pal(8,"Set2"))[sample(8*4,nC)]
}
ncolor(15)
ncolor(15)
ncolor(15)
ncolor(15)
ncolor(15)
ncolor(15)
ncolor(15)
ncolor(15)
ncolor <- function(nC){
c(brewer.pal(8,"Accent"), brewer.pal(8,"Dark2"),
brewer.pal(8,"Set1"), brewer.pal(8,"Set2"))[sample(8*4,nC)]
}
library(rEAG)
eag@wd
library(rEAG)
