depol$con <- as.character(depol$con) %>% as.factor() # les numeriques posent probleme pour le graphe
depol$seq <- as.factor(depol$seq) # facteur
depol$variable <- rownames(depol) # pour le graphe
depol$Idp_adj <- abs(depol$Idp)
depol$Idp_adj[i_ctrl] <- 0
eag <- data.frame(time = Tp[fmr]/100, t(resM[,-(1:4)])) # data
setDT(eag) # transformation en data.table (???)
Teag <- melt(eag, id.vars = "time") # mise en forme pour plotly
Teag$seq <- Teag$variable # ajout de la sequence des VOC
levels(Teag$seq) <- depol$seq
Teag$con <- Teag$variable # ajout des concentrations
levels(Teag$con) <- depol$con
# Graphes ####
### by Concentration
fig <- plot_ly(Teag, type = "scatter", mode = "lines", x = ~time, y = ~value,
color = ~con, name = ~variable)
fig <- plotly::layout(fig, title = Sname,
shapes = list(list(type = "line", y0 = 0, y1 = 1, yref = "paper",
x0 = 0, x1 = 0, line = list(color = "orange", dash="dot")),
list(type = "line", y0 = 0, y1 = 1, yref = "paper",
x0 = tmP/100, x1 = tmP/100, line = list(color = "orange", dash="dot"))),
xaxis = list(title = 'Time (sec)'),
yaxis = list(title = 'EAG (mA)'),
legend = list(title=list(text='<b> VOC_concentration </b>'), x = 0.02, y = 0.9))
fig <- add_markers(fig, x = ~Tdp, y = ~Idp, data = depol, showlegend= FALSE)
# print(fig)
htmlwidgets::saveWidget(fig, paste0(wd,"/figures/options_graph_dy.html"), selfcontained = TRUE)
file.rename(from = paste0(wd,"/figures/options_graph_dy.html"),
to = paste0(wd,"/figures/",Sname,"_by_concentration.html"))
### by VOC
fig <- plot_ly(Teag, type = "scatter", mode = "lines", x = ~time, y = ~value,
color = ~seq, name = ~variable)
fig <- plotly::layout(fig, title = Sname,
shapes = list(list(type = "line", y0 = 0, y1 = 1, yref = "paper",
x0 = 0, x1 = 0, line = list(color = "orange", dash="dot")),
list(type = "line", y0 = 0, y1 = 1, yref = "paper",
x0 = tmP/100, x1 = tmP/100, line = list(color = "orange", dash="dot"))),
xaxis = list(title = 'Time (sec)'),
yaxis = list(title = 'EAG (mA)'),
legend = list(title=list(text='<b> VOC_concentration </b>'),
x = 0.02, y = 0.9))
fig <- add_markers(fig, x = ~Tdp, y = ~Idp, data = depol, showlegend= FALSE)
# print(fig)
htmlwidgets::saveWidget(fig, paste0(wd,"/figures/options_graph_dy.html"), selfcontained = TRUE)
file.rename(from = paste0(wd,"/figures/options_graph_dy.html"),
to = paste0(wd,"/figures/",Sname,"_by_VOC.html"))
# Export ####
return(new(Class = "eag", depol = depol, eag = eag, tmP = tmP, wd = wd, names = Sname))
}
expdes
B_137 <- eag.import(Sname = "Bombus137_C_0ppb_1h", wd = wod)
B_170 <- eag.import(Sname = "Bombus170_C_0ppb_1h", wd = wod)
B_171 <- eag.import(Sname = "Bombus171_C_0ppb_1h", wd = wod)
B_172 <- eag.import(Sname = "Bombus172_C_0ppb_1h", wd = wod)
Sname <- c("B_137","B_170","B_171","B_172")
Meag <- eag.merge(B_137, B_170, B_171, B_172, eag_names = Sname)
View(Meag@depol)
eag = Meag
# check
if (class(eag) != "eag") stop("eag must be a eag S4 object")
if (!is.character(moda)) stop("'moda' must be character")
if (("figures" %in% dir(wd))==FALSE) dir.create(paste0(wd,"/figures"))
if (length(moda) != 1) stop("Length of 'moda' must be 1.")
im <- match(moda,colnames(eag@depol))
moda = "seq"
# check
if (class(eag) != "eag") stop("eag must be a eag S4 object")
if (!is.character(moda)) stop("'moda' must be character")
if (("figures" %in% dir(wd))==FALSE) dir.create(paste0(wd,"/figures"))
if (length(moda) != 1) stop("Length of 'moda' must be 1.")
im <- match(moda,colnames(eag@depol))
if (is.na(im)) stop("moda must be a vector of eag@depol")
# Mise en forme ####
Teag <- melt(eag@eag, id.vars = "time") # mise en forme pour plotly
Teag$moda <- Teag$variable # ajout de la sequence des VOC
levels(Teag$moda) <- eag@depol[,im]
eag@depol$moda <- eag@depol[,im]
eag@eag
dim(eag@eag)
eag@depol$seq
eag@tmP
eag@names
eag@depol
delet_con = NULL
class(delet_con)
is.null(delet_con)
if (is.null(delet_con)|is.character(delet_con)) print("ok")
if (!is.null(delet_con)|!is.character(delet_con)) print("ok")
if (!is.null(delet_con)) if(!is.character(delet_con)) print("ok")
colnames(eag@depol)
eag@con
eag@depol$con
levels(eag@depol$con)
delet_con %in% levels(eag@depol$con)
delet_con <- "0"
delet_con %in% levels(eag@depol$con)
delet_con <- c("0","T")
delet_con %in% levels(eag@depol$con)
delet_con %in% levels(eag@depol$con) %>% is.FALSE()
delet_con %in% levels(eag@depol$con) %>% isFALSE()
delet_con %in% levels(eag@depol$con) %>% isTRUE()
delet_con <- c("0")
delet_con %in% levels(eag@depol$con) %>% isTRUE()
if (is.character(delet_con)) if(delet_con %in% levels(eag@depol$con) %>% isTRUE()) print("ok")
if (is.character(delet_con)) if(delet_con %in% levels(eag@depol$con) %>% !isTRUE()) print("ok")
if (is.character(delet_con)) if(delet_con %in% levels(eag@depol$con) %>% isFALSE()) print("ok")
delet_con <- c("0","1")
delet_con <- c("0","1")
if (is.character(delet_con)) if(delet_con %in% levels(eag@depol$con) %>% isFALSE()) print("ok")
delet_con <- c("0","T")
if (is.character(delet_con)) if(delet_con %in% levels(eag@depol$con) %>% isFALSE()) print("ok")
if (is.character(delet_con)) if(delet_con %in% levels(eag@depol$con)) print("ok")
match(delet_con, levels(eag@depol$con))
mean(delet_con %in% levels(eag@depol$con))
if (is.character(delet_con)) if(mean(delet_con %in% levels(eag@depol$con)) != 1) print("ok")
delet_con <- c("0","1")
if (is.character(delet_con)) if(mean(delet_con %in% levels(eag@depol$con)) != 1) print("ok")
delet_con <- c("0")
if (is.character(delet_con)) if(mean(delet_con %in% levels(eag@depol$con)) != 1) print("ok")
delet_seq <- c("T")
if (!is.null(delet_con)) if (!is.character(delet_con)) stop("'delet_con' must be null or a character")
if (!is.null(delet_seq)) if (!is.character(delet_seq)) stop("'delet_seq' must be null or a character")
if (is.character(delet_con)) if(mean(delet_con %in% levels(eag@depol$con)) != 1) stop("'delet_con' isn't a level of experimental design")
if (is.character(delet_seq)) if(mean(delet_seq %in% levels(eag@depol$seq)) != 1) stop("'delet_seq' isn't a level of experimental design")
delet_seq <- c("T","1")
if (!is.null(delet_seq)) if (!is.character(delet_seq)) stop("'delet_seq' must be null or a character")
if (is.character(delet_con)) if(mean(delet_con %in% levels(eag@depol$con)) != 1) stop("'delet_con' isn't a level of experimental design")
if (is.character(delet_seq)) if(mean(delet_seq %in% levels(eag@depol$seq)) != 1) stop("'delet_seq' isn't a level of experimental design")
dim(eag@eag)
dim(eag@depol)
colnames(eag@eag)
match(delet_con,eag@depol$con)
# import
wod <- "C:/Users/huguenin/Documents/R/rEAG_test"
setwd(wod)
save.image("~/R/rEAG_test/rEAG_test_2.RData")
load("~/R/rEAG_test/rEAG_test_2.RData")
# import
wod <- "C:/Users/huguenin/Documents/R/rEAG_test" # setwd(wod)
setwd(wod)
delet_con %in% eag@depol$con
eag@depol$con
match(eag@depol$con,delet_con)
which(eag@depol$con == delet_con)
which(eag@depol$seq == delet_seq)
eag@depol$seq
delet_seq <- c("T","B")
which(eag@depol$seq == delet_seq)
length(eag@depol$con)
length(eag@depol$seq)
eag@depol$seq
which(eag@depol$con == delet_con)
delet_seq <- c("T")
which(eag@depol$con == delet_con)
which(eag@depol$seq == delet_seq)
which(delet_con == eag@depol$con)
which(delet_seq == eag@depol$seq)
delet_seq <- c("T","B")
which(delet_con == eag@depol$con)
which(delet_seq == eag@depol$seq)
match(delet_seq, eag@depol$seq)
match(eag@depol$seq,delet_seq)
which(match(eag@depol$seq,delet_seq) != NA)
which(match(eag@depol$seq,delet_seq) > 0)
# suppresion des echantillon non desires ###
delet_con <- c("1")
delet_seq <- c("T","B")
which(delet_con == eag@depol$con)
which(delet_seq == eag@depol$seq)
c(which(match(eag@depol$seq,delet_seq) > 0),which(match(eag@depol$seq,delet_seq) > 0)) %>% unique()
library(plotly)
library(stringr)
library(pracma)
library(RColorBrewer)
library(data.table)
library(magrittr)
library(stringr)
library(rEAG)
c(which(match(eag@depol$seq,delet_seq) > 0),which(match(eag@depol$seq,delet_seq) > 0)) %>% unique()
i_del <- c(which(match(eag@depol$seq,delet_seq) > 0),
which(match(eag@depol$con,delet_con) > 0)) %>% unique()
i_del
i_del <- c(which(match(eag@depol$seq,delet_seq) > 0),
which(match(eag@depol$con,delet_con) > 0)) %>% unique() %>% sort()
i_del <- c(which(match(eag@depol$seq,delet_seq) > 0),
which(match(eag@depol$con,delet_con) > 0)) %>% unique() %>% order()
i_del
i_del <- c(which(match(eag@depol$seq,delet_seq) > 0),
which(match(eag@depol$con,delet_con) > 0)) %>% unique() %>% sort()
i_del
i_del <- c(which(match(eag@depol$seq,delet_seq) > 0),
which(match(eag@depol$con,delet_con) > 0)) %>% unique() %>% sort()
eag@depol <- eag@depol[-i_del,]
eag@depol
eag@eag
i_del
-(i_del+1)
eag@eag <- eag@eag[,-(i_del+1)]
eag@eag[,2:4]
eag@eag[,-(4:71)]
eag@eag[,-(i_del)]
fmr=4:71
eag@eag[,-(4:71)]
eag@eag[,-(i_del)]
eag@eag[,i_del]
i_del <- c(which(match(eag@depol$seq,delet_seq) > 0),
which(match(eag@depol$con,delet_con) > 0)) %>% unique() %>% sort()
i_del
eag <- Meag
i_del <- c(which(match(eag@depol$seq,delet_seq) > 0),
which(match(eag@depol$con,delet_con) > 0)) %>% unique() %>% sort()
i_del
i_del
eag@eag[,i_del]
i_del
eag@eag[,..i_del]
eag@eag[,..-i_del]
eag@eag[,-..i_del]
eag@eag[,-..(i_del+1)]
eag@eag[,-..i_del+1]
i_del <- i_del + 1
eag@eag[,-..i_del]
eag@tmP
# suppresion des echantillon non desires ###
delet_con <- c("1")
delet_seq <- c("T","B")
eag <- Meag
i_del <- c(which(match(eag@depol$seq,delet_seq) > 0),
which(match(eag@depol$con,delet_con) > 0)) %>% unique() %>% sort()
eag@depol <- eag@depol[-i_del,]
eag@eag <- eag@eag[,-(i_del+1)]
i_del <- i_del + 1
eag@eag[,-..i_del]
# Mise en forme ####
Teag <- melt(eag@eag, id.vars = "time") # mise en forme pour plotly
Teag$moda <- Teag$variable # ajout de la sequence des VOC
eag@eag <- eag@eag[,-..i_del]
# Mise en forme ####
Teag <- melt(eag@eag, id.vars = "time") # mise en forme pour plotly
Teag$moda <- Teag$variable # ajout de la sequence des VOC
levels(Teag$moda) <- eag@depol[,im]
eag@depol$moda <- eag@depol[,im]
# Graphe ####
nM <- length(levels(Teag$moda))
dcol <- c(brewer.pal(8,"Accent"),brewer.pal(8,"Dark2"),brewer.pal(8,"Set2"))[1:nM]
### by Modality
fig <- plot_ly(Teag, type = "scatter", mode = "lines", x = ~time, y = ~value,
color = ~moda, name = ~variable, colors = dcol)
fig <- plotly::layout(fig, title = paste(str_flatten(eag@names, " "),"by",moda),
shapes = list(list(type = "line", y0 = 0, y1 = 1, yref = "paper",
x0 = 0, x1 = 0, line = list(color = "orange", dash="dot")),
list(type = "line", y0 = 0, y1 = 1, yref = "paper",
x0 = tmP/100, x1 = tmP/100, line = list(color = "orange", dash="dot"))),
xaxis = list(title = 'Time (sec)'),
yaxis = list(title = 'EAG (mV)'),
legend = list(title=list(text='<b> VOC_concentration </b>'), x = 0.02, y = 0.9))
fig <- add_markers(fig, x = ~Tdp, y = ~Idp, data = eag@depol, showlegend = FALSE)
print(fig)
levels(Teag$moda)
# Graphe ####
nM <- length(levels(Teag$moda))
brewer.pal(8,"Accent")
dcol <- c(brewer.pal(8,"Accent"),brewer.pal(8,"Dark2"),brewer.pal(8,"Set2"))[1:nM]
dcol <- c(brewer.pal(8,"Dark2"),brewer.pal(8,"Set2"))[1:nM]
dcol
### by Modality
fig <- plot_ly(Teag, type = "scatter", mode = "lines", x = ~time, y = ~value,
color = ~moda, name = ~variable, colors = dcol)
fig <- plotly::layout(fig, title = paste(str_flatten(eag@names, " "),"by",moda),
shapes = list(list(type = "line", y0 = 0, y1 = 1, yref = "paper",
x0 = 0, x1 = 0, line = list(color = "orange", dash="dot")),
list(type = "line", y0 = 0, y1 = 1, yref = "paper",
x0 = tmP/100, x1 = tmP/100, line = list(color = "orange", dash="dot"))),
xaxis = list(title = 'Time (sec)'),
yaxis = list(title = 'EAG (mV)'),
legend = list(title=list(text='<b> VOC_concentration </b>'), x = 0.02, y = 0.9))
fig <- add_markers(fig, x = ~Tdp, y = ~Idp, data = eag@depol, showlegend = FALSE)
print(fig)
#'
#' @param eag a eag objet
#' @param moda a modality for group samples
#'
#' @return a figure
#' @export
#'
#' @examples
#' # Meagdepol$con_seq <- paste0(Meag@depol$seq,"_",Meag@depol$con)
#' # eag.print(Meag, "con_seq")
eag.print <- function(eag, moda = "seq", delet_seq = NULL, delet_con = NULL){
eag.merge <- function(..., eag_names = NULL, tmP = NULL, wd = NULL, print.graph = FALSE){
ls_eag <- list(...) # ls_eag <- list(B_137, B_170, B_171, B_172)
# check
sapply(ls_eag, function(X) if (class(X) != "eag") stop("variables must be a eag S4 object"))
if (is.null(eag_names)) eag_names <- sapply(ls_eag, function(X) return(X@names))
if (!is.character(eag_names))  stop("eag_names must be a character")
if (length(eag_names) != length(ls_eag)) stop("Length of eag_names must be egal to length of eag objects")
if (is.null(wd) == TRUE){
wd <- lapply(ls_eag, function(X) return(X@wd)) %>% unlist() %>% unique()
if (length(wd) != 1) print(paste("Several 'wd' have been detected. The current 'wd' is :",wd[1]))
wd <- wd[1]
}
if (!is.character(wd)) stop("'wd' must be character")
if (("figures" %in% dir(wd))==FALSE) dir.create(paste0(wd,"/figures"))
if (is.null(tmP) == TRUE){
tmP <- lapply(ls_eag, function(X) return(X@tmP)) %>% unlist() %>% unique()
if (length(tmP) != 1) print(paste("Several 'tmP' have been detected. The current 'tmP' is :",tmP[1]))
tmP <- tmP[1]
}
if (!is.numeric(tmP)) stop("'tmP' must be numeric")
if (length(tmP) != 1) stop("Length of 'tmP' must be 1.")
if (!is.logical(print.graph)) stop("'print.graph must be a logical")
# mise en forme
leag <- length(ls_eag)
for(i in 1:leag){ # i=1
rownames(ls_eag[[i]]@depol) <- paste0(eag_names[i],"_",rownames(ls_eag[[i]]@depol))
ls_eag[[i]]@depol$variable <- rownames(ls_eag[[i]]@depol)
colnames(ls_eag[[i]]@eag) <- c("time",rownames(ls_eag[[i]]@depol))
}
# Merge ####
ls_depol <- lapply(ls_eag, function(X) return(X@depol))
depol <- do.call(rbind,ls_depol)
list_eag <- lapply(ls_eag, function(X) return(X@eag[,-1]))
eag <- do.call(cbind,list_eag) %>% cbind("time" = ls_eag[[1]]@eag$time,.)
# Mise en forme ####
Teag <- melt(eag, id.vars = "time") # mise en forme pour plotly
Teag$seq <- Teag$variable # ajout de la sequence des VOC
levels(Teag$seq) <- depol$seq
Teag$con <- Teag$variable # ajout des concentrations
levels(Teag$con) <- depol$con
# Graphes ####
if(print.graph == TRUE){
### by Concentration
fig <- plot_ly(Teag, type = "scatter", mode = "lines", x = ~time, y = ~value,
color = ~con, name = ~variable)
fig <- plotly::layout(fig, title = str_flatten(string = eag_names,collapse = " "),
shapes = list(list(type = "line", y0 = 0, y1 = 1, yref = "paper",
x0 = 0, x1 = 0, line = list(color = "orange", dash="dot")),
list(type = "line", y0 = 0, y1 = 1, yref = "paper",
x0 = tmP/100, x1 = tmP/100, line = list(color = "orange", dash="dot"))),
xaxis = list(title = 'Time (sec)'),
yaxis = list(title = 'EAG (mV)'),
legend = list(title=list(text='<b> VOC_concentration </b>'),
x = 0.02, y = 0.9))
fig <- add_markers(fig, x = ~Tdp, y = ~Idp, data = depol, showlegend= FALSE)
# print(fig)
htmlwidgets::saveWidget(fig, paste0(wd,"/figures/options_graph_dy.html"), selfcontained = TRUE)
file.rename(from = paste0(wd,"/figures/options_graph_dy.html"),
to = paste0(wd,"/figures/all_EAG_by_concentration.html"))
### by VOC
fig <- plot_ly(Teag, type = "scatter", mode = "lines", x = ~time, y = ~value,
color = ~seq, name = ~variable)
fig <- plotly::layout(fig, title = str_flatten(eag_names," "),
shapes = list(list(type = "line", y0 = 0, y1 = 1, yref = "paper",
x0 = 0, x1 = 0, line = list(color = "orange", dash="dot")),
list(type = "line", y0 = 0, y1 = 1, yref = "paper",
x0 = tmP/100, x1 = tmP/100, line = list(color = "orange", dash="dot"))),
xaxis = list(title = 'Time (sec)'),
yaxis = list(title = 'EAG (mV)'),
legend = list(title=list(text='<b> VOC_concentration </b>'),
x = 0.02, y = 0.9))
fig <- add_markers(fig, x = ~Tdp, y = ~Idp, data = depol, showlegend= FALSE)
# print(fig)
htmlwidgets::saveWidget(fig, paste0(wd,"/figures/options_graph_dy.html"), selfcontained = TRUE)
file.rename(from = paste0(wd,"/figures/options_graph_dy.html"),
to = paste0(wd,"/figures/all_EAG_by_VOC.html"))
}
# export
return(new(Class = "eag", depol = depol, eag = eag, tmP = tmP, wd = wd, names = eag_names))
}
eag.print(Meag, "Ozone concentration", delet_con = "1", delet_seq = c("T","B"))
eag.print <- function(eag, moda = "seq", delet_seq = NULL, delet_con = NULL){
# check
if (class(eag) != "eag") stop("eag must be a eag S4 object")
if (!is.character(moda)) stop("'moda' must be character")
if (("figures" %in% dir(wd))==FALSE) dir.create(paste0(wd,"/figures"))
if (length(moda) != 1) stop("Length of 'moda' must be 1.")
im <- match(moda,colnames(eag@depol))
if (is.na(im)) stop("moda must be a vector of eag@depol")
if (!is.null(delet_con)) if (!is.character(delet_con)) stop("'delet_con' must be null or a character")
if (!is.null(delet_seq)) if (!is.character(delet_seq)) stop("'delet_seq' must be null or a character")
if (is.character(delet_con)) if(mean(delet_con %in% levels(eag@depol$con)) != 1) stop("'delet_con' isn't a level of experimental design")
if (is.character(delet_seq)) if(mean(delet_seq %in% levels(eag@depol$seq)) != 1) stop("'delet_seq' isn't a level of experimental design")
# suppresion des echantillon non desires ###
i_del <- c(which(match(eag@depol$seq,delet_seq) > 0),
which(match(eag@depol$con,delet_con) > 0)) %>% unique() %>% sort()
eag@depol <- eag@depol[-i_del,]
i_del <- i_del + 1
eag@eag <- eag@eag[,-..i_del]
# Mise en forme ####
Teag <- melt(eag@eag, id.vars = "time") # mise en forme pour plotly
Teag$moda <- Teag$variable # ajout de la sequence des VOC
levels(Teag$moda) <- eag@depol[,im]
eag@depol$moda <- eag@depol[,im]
# Graphe ####
nM <- length(levels(Teag$moda))
dcol <- c(brewer.pal(8,"Accent"),brewer.pal(8,"Dark2"),brewer.pal(8,"Set2"))[1:nM]
### by Modality
fig <- plot_ly(Teag, type = "scatter", mode = "lines", x = ~time, y = ~value,
color = ~moda, name = ~variable, colors = dcol)
fig <- plotly::layout(fig, title = paste(str_flatten(eag@names, " "),"by",moda),
shapes = list(list(type = "line", y0 = 0, y1 = 1, yref = "paper",
x0 = 0, x1 = 0, line = list(color = "orange", dash="dot")),
list(type = "line", y0 = 0, y1 = 1, yref = "paper",
x0 = tmP/100, x1 = tmP/100, line = list(color = "orange", dash="dot"))),
xaxis = list(title = 'Time (sec)'),
yaxis = list(title = 'EAG (mV)'),
legend = list(title=list(text='<b> VOC_concentration </b>'), x = 0.02, y = 0.9))
fig <- add_markers(fig, x = ~Tdp, y = ~Idp, data = eag@depol, showlegend = FALSE)
print(fig)
htmlwidgets::saveWidget(fig, paste0(wd,"/figures/options_graph_dy.html"), selfcontained = TRUE)
file.rename(from = paste0(wd,"/figures/options_graph_dy.html"),
to = paste0(wd,"/figures/eag_by_",moda,".html"))
}
eag.print(Meag, "Ozone concentration", delet_con = "1", delet_seq = c("T","B"))
eag.print(Meag, "con", delet_con = "1", delet_seq = c("T","B"))
eag.print(Meag, "con", delet_seq = "T")
eag.print(Meag, "seq", delet_seq = "T")
### by Modality
fig <- plot_ly(Teag, type = "scatter", mode = "lines", x = ~time, y = ~value,
color = ~moda, name = ~variable)
fig <- plotly::layout(fig, title = paste(str_flatten(eag@names, " "),"by",moda),
shapes = list(list(type = "line", y0 = 0, y1 = 1, yref = "paper",
x0 = 0, x1 = 0, line = list(color = "orange", dash="dot")),
list(type = "line", y0 = 0, y1 = 1, yref = "paper",
x0 = tmP/100, x1 = tmP/100, line = list(color = "orange", dash="dot"))),
xaxis = list(title = 'Time (sec)'),
yaxis = list(title = 'EAG (mV)'),
legend = list(title=list(text='<b> VOC_concentration </b>'), x = 0.02, y = 0.9))
fig <- add_markers(fig, x = ~Tdp, y = ~Idp, data = eag@depol, showlegend = FALSE)
print(fig)
eag.print <- function(eag, moda = "seq", delet_seq = NULL, delet_con = NULL){
# check
if (class(eag) != "eag") stop("eag must be a eag S4 object")
if (!is.character(moda)) stop("'moda' must be character")
if (("figures" %in% dir(wd))==FALSE) dir.create(paste0(wd,"/figures"))
if (length(moda) != 1) stop("Length of 'moda' must be 1.")
im <- match(moda,colnames(eag@depol))
if (is.na(im)) stop("moda must be a vector of eag@depol")
if (!is.null(delet_con)) if (!is.character(delet_con)) stop("'delet_con' must be null or a character")
if (!is.null(delet_seq)) if (!is.character(delet_seq)) stop("'delet_seq' must be null or a character")
if (is.character(delet_con)) if(mean(delet_con %in% levels(eag@depol$con)) != 1) stop("'delet_con' isn't a level of experimental design")
if (is.character(delet_seq)) if(mean(delet_seq %in% levels(eag@depol$seq)) != 1) stop("'delet_seq' isn't a level of experimental design")
# suppresion des echantillon non desires ###
i_del <- c(which(match(eag@depol$seq,delet_seq) > 0),
which(match(eag@depol$con,delet_con) > 0)) %>% unique() %>% sort()
eag@depol <- eag@depol[-i_del,]
i_del <- i_del + 1
eag@eag <- eag@eag[,-..i_del]
# Mise en forme ####
Teag <- melt(eag@eag, id.vars = "time") # mise en forme pour plotly
Teag$moda <- Teag$variable # ajout de la sequence des VOC
levels(Teag$moda) <- eag@depol[,im]
eag@depol$moda <- eag@depol[,im]
### Graph by modality
fig <- plot_ly(Teag, type = "scatter", mode = "lines", x = ~time, y = ~value,
color = ~moda, name = ~variable)
fig <- plotly::layout(fig, title = paste(str_flatten(eag@names, " "),"by",moda),
shapes = list(list(type = "line", y0 = 0, y1 = 1, yref = "paper",
x0 = 0, x1 = 0, line = list(color = "orange", dash="dot")),
list(type = "line", y0 = 0, y1 = 1, yref = "paper",
x0 = tmP/100, x1 = tmP/100, line = list(color = "orange", dash="dot"))),
xaxis = list(title = 'Time (sec)'),
yaxis = list(title = 'EAG (mV)'),
legend = list(title=list(text='<b> VOC_concentration </b>'), x = 0.02, y = 0.9))
fig <- add_markers(fig, x = ~Tdp, y = ~Idp, data = eag@depol, showlegend = FALSE)
print(fig)
htmlwidgets::saveWidget(fig, paste0(wd,"/figures/options_graph_dy.html"), selfcontained = TRUE)
file.rename(from = paste0(wd,"/figures/options_graph_dy.html"),
to = paste0(wd,"/figures/eag_by_",moda,".html"))
}
eag.print <- function(eag, moda = "seq", delet_seq = NULL, delet_con = NULL){
# check
if (class(eag) != "eag") stop("eag must be a eag S4 object")
if (!is.character(moda)) stop("'moda' must be character")
if (("figures" %in% dir(wd))==FALSE) dir.create(paste0(wd,"/figures"))
if (length(moda) != 1) stop("Length of 'moda' must be 1.")
im <- match(moda,colnames(eag@depol))
if (is.na(im)) stop("moda must be a vector of eag@depol")
if (!is.null(delet_con)) if (!is.character(delet_con)) stop("'delet_con' must be null or a character")
if (!is.null(delet_seq)) if (!is.character(delet_seq)) stop("'delet_seq' must be null or a character")
if (is.character(delet_con)) if(mean(delet_con %in% levels(eag@depol$con)) != 1) stop("'delet_con' isn't a level of experimental design")
if (is.character(delet_seq)) if(mean(delet_seq %in% levels(eag@depol$seq)) != 1) stop("'delet_seq' isn't a level of experimental design")
# suppresion des echantillon non desires ###
i_del <- c(which(match(eag@depol$seq,delet_seq) > 0),
which(match(eag@depol$con,delet_con) > 0)) %>% unique() %>% sort()
eag@depol <- eag@depol[-i_del,]
i_del <- i_del + 1
eag@eag <- eag@eag[,-..i_del]
# Mise en forme ####
Teag <- melt(eag@eag, id.vars = "time") # mise en forme pour plotly
Teag$moda <- Teag$variable # ajout de la sequence des VOC
levels(Teag$moda) <- eag@depol[,im]
eag@depol$moda <- eag@depol[,im]
### Graph by modality
fig <- plot_ly(Teag, type = "scatter", mode = "lines", x = ~time, y = ~value,
color = ~moda, name = ~variable)
fig <- plotly::layout(fig, title = paste(str_flatten(eag@names, " "),"by",moda),
shapes = list(list(type = "line", y0 = 0, y1 = 1, yref = "paper",
x0 = 0, x1 = 0, line = list(color = "orange", dash="dot")),
list(type = "line", y0 = 0, y1 = 1, yref = "paper",
x0 = tmP/100, x1 = tmP/100, line = list(color = "orange", dash="dot"))),
xaxis = list(title = 'Time (sec)'),
yaxis = list(title = 'EAG (mV)'),
legend = list(title=list(text='<b> VOC_concentration </b>'), x = 0.02, y = 0.9))
fig <- add_markers(fig, x = ~Tdp, y = ~Idp, data = eag@depol, showlegend = FALSE)
print(fig)
htmlwidgets::saveWidget(fig, paste0(wd,"/figures/options_graph_dy.html"), selfcontained = TRUE)
file.rename(from = paste0(wd,"/figures/options_graph_dy.html"),
to = paste0(wd,"/figures/eag_by_",moda,".html"))
}
eag.print(Meag, "seq", delet_seq = "T")
library(rEAG)
